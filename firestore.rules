rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isLessor() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'lessor';
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isVerifiedUser() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerified == true;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // Items collection
    match /items/{itemId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && isLessor();
      allow update: if isAuthenticated() && 
        resource.data.lessorId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.lessorId == request.auth.uid;
    }
    
    // Rentals collection
    match /rentals/{rentalId} {
      allow read: if isAuthenticated() && 
        (resource.data.renterId == request.auth.uid || 
         resource.data.lessorId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.renterId == request.auth.uid || 
         resource.data.lessorId == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && 
        request.resource.data.reviewerId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.reviewerId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.reviewerId == request.auth.uid;
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow delete: if isAdmin();
    }
    
    // Messages collection
    match /conversations/{conversationId}/messages/{messageId} {
      allow read: if isAuthenticated() && 
        get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants[request.auth.uid] != null;
      allow create: if isAuthenticated() && 
        get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants[request.auth.uid] != null &&
        request.resource.data.senderId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.senderId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.senderId == request.auth.uid;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // System settings (admin only)
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Analytics and reports (admin only)
    match /analytics/{reportId} {
      allow read, write: if isAdmin();
    }
    
    // User reports
    match /reports/{reportId} {
      allow read: if isAuthenticated() && 
        (resource.data.reporterId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
        request.resource.data.reporterId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
} 